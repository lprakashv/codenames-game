{
"version":3,
"file":"module$node_modules$react_overlays$cjs$DropdownToggle.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,qDAAf,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0BlHC,QAASA,kBAAiB,EAAG,CAAA,IACvBC,KAAO,CAAC,CAAA,CAAGC,MAAH,CAAUC,UAAX,EAAuBC,gBAAA,CAAiB,SAAjB,CAAvB,CAAPH,EAA8D,EADvC,CAEvBI,UAAYJ,IAAZI,CAAiBC,IACjBA,UAAAA,CAAqB,IAAK,EAAnB,GAAAD,SAAA,CAAuB,CAAA,CAAvB,CAA+BA,SAHf,KAIvBE,YAAcN,IAAdM,CAAmBC,MAIvB,OAAO,CAAC,CACNC,IAHcR,IAGdQ,CAHmBC,SAGnBD,EAAkBE,IADZ,CAEN,gBAAiB,CAAA,CAFX,CAGN,gBAAiB,CAAC,CAACL,SAHb,CAAD,CAIJ,CACDA,KAAMA,SADL,CAEDE,OAT2B,IAAK,EAArBA,GAAAD,WAAAC,CAAyBG,IAAzBH,CAAgCD,WAO1C,CAJI,CARoB,CA2C7BK,QAASA,eAAc,CAACC,KAAD,CAAQ,CACzBC,KAAAA,CAAWD,KAAXC,CAAiBA,QADQ,KAGzBC;AAAqBf,iBAAA,EAHI,CAKzBgB,oBAAsBD,kBAAA,CAAmB,CAAnB,CAI1B,OAAoBb,OAAA,CAAO,SAAP,CAAA,CAAkBe,aAAlB,CAAgCf,MAAA,CAAO,SAAP,CAAhC,CAAkDgB,QAAlD,CAA4D,IAA5D,CAAkEJ,KAAA,CAAS,CAC7FR,KAJSU,mBAITV,CAJ6BA,IAGgE,CAE7FE,OAJWQ,mBAIXR,CAJ+BA,MAE8D,CAG7FW,MARUJ,kBAAAI,CAAmB,CAAnBA,CAKmF,CAAT,CAAlE,CATS,CAlE3BC,MAAAA,CAA0BvB,OAAA,CAAQ,mEAAR,CAE1BwB,OAAAA,CAAyBxB,OAAA,CAAQ,kEAAR,CAE7BE,QAAA,CAAQuB,UAAR,CAAqB,CAAA,CACrBvB,QAAA,CAAQC,iBAAR,CAA4BA,iBAC5BD,QAAA,CAAQ,SAAR,CAAA,CAAqB,IAAK,EAE1B,KAAIwB;AAAaF,MAAA,CAAuBxB,OAAA,CAAQ,sCAAR,CAAvB,CAAjB,CAEIK,OAASkB,MAAA,CAAwBvB,OAAA,CAAQ,iCAAR,CAAxB,CAFb,CAIIO,iBAAmBiB,MAAA,CAAuBxB,OAAA,CAAQ,wDAAR,CAAvB,CAJvB,CAMIc,KAAOA,QAAa,EAAG,EA2BvBa,QAAAA,CAAY,CAgBdV,SAAUS,UAAA,CAAW,SAAX,CAAVT,CAAgCW,IAAhCX,CAAqCY,UAhBvB,CAyChBd,eAAA,CAAee,WAAf,CAA6B,6BAC7Bf,eAAA,CAAeY,SAAf,CAA2BA,OAI3BzB,QAAA,CAAQ,SAAR,CAAA,CADea,cAzFmG;",
"sources":["node_modules/react-overlays/cjs/DropdownToggle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_overlays$cjs$DropdownToggle\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.useDropdownToggle = useDropdownToggle;\nexports[\"default\"] = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _DropdownContext = _interopRequireDefault(require(\"./DropdownContext\"));\n\nvar noop = function noop() {};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\n\n\nfunction useDropdownToggle() {\n  var _ref = (0, _react.useContext)(_DropdownContext[\"default\"]) || {},\n      _ref$show = _ref.show,\n      show = _ref$show === void 0 ? false : _ref$show,\n      _ref$toggle = _ref.toggle,\n      toggle = _ref$toggle === void 0 ? noop : _ref$toggle,\n      setToggle = _ref.setToggle;\n\n  return [{\n    ref: setToggle || noop,\n    'aria-haspopup': true,\n    'aria-expanded': !!show\n  }, {\n    show: show,\n    toggle: toggle\n  }];\n}\n\nvar propTypes = {\n  /**\n   * A render prop that returns a Toggle element. The `props`\n   * argument should spread through to **a component that can accept a ref**. Use\n   * the `onToggle` argument to toggle the menu open or closed\n   *\n   * @type {Function ({\n   *   show: boolean,\n   *   toggle: (show: boolean) => void,\n   *   props: {\n   *     ref: (?HTMLElement) => void,\n   *     aria-haspopup: true\n   *     aria-expanded: boolean\n   *   },\n   * }) => React.Element}\n   */\n  children: _propTypes[\"default\"].func.isRequired\n};\n\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\nfunction DropdownToggle(_ref2) {\n  var children = _ref2.children;\n\n  var _useDropdownToggle = useDropdownToggle(),\n      props = _useDropdownToggle[0],\n      _useDropdownToggle$ = _useDropdownToggle[1],\n      show = _useDropdownToggle$.show,\n      toggle = _useDropdownToggle$.toggle;\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, children({\n    show: show,\n    toggle: toggle,\n    props: props\n  }));\n}\n\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\nDropdownToggle.propTypes = propTypes;\n/** @component */\n\nvar _default = DropdownToggle;\nexports[\"default\"] = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","useDropdownToggle","_ref","_react","useContext","_DropdownContext","_ref$show","show","_ref$toggle","toggle","ref","setToggle","noop","DropdownToggle","_ref2","children","_useDropdownToggle","_useDropdownToggle$","createElement","Fragment","props","_interopRequireWildcard","_interopRequireDefault","__esModule","_propTypes","propTypes","func","isRequired","displayName"]
}
