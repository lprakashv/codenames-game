{
"version":3,
"file":"module$node_modules$$restart$hooks$cjs$useForceUpdate.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAe,qDAAf,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlHA,OAAA,CAAQC,UAAR,CAAqB,CAAA,CACrBD,QAAA,CAAQE,OAAR,CAoBAC,QAAuB,EAAG,CAQxB,MALkBC,CAAC,CAAA,CAAGC,MAAH,CAAUC,UAAXF,EAAuB,QAAS,CAACG,KAAD,CAAQ,CACxD,MAAO,CAACA,KADgD,CAAxCH,CAEf,CAAA,CAFeA,CAGHI,CAAY,CAAZA,CANS,CAlB1B,KAAIH,OAASP,OAAA,CAAQ,iCAAR,CANqG;",
"sources":["node_modules/@restart/hooks/cjs/useForceUpdate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$restart$hooks$cjs$useForceUpdate\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = useForceUpdate;\n\nvar _react = require(\"react\");\n\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\nfunction useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are stricting equal to the last state value\n  var _useReducer = (0, _react.useReducer)(function (state) {\n    return !state;\n  }, false),\n      dispatch = _useReducer[1];\n\n  return dispatch;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","useForceUpdate","_useReducer","_react","useReducer","state","dispatch"]
}
